import 'dart:async';
import 'dart:convert';
import 'dart:html' as html;
import 'dart:js' as js;
import '../models/photo_upload_model.dart';

class TelegramWebAppService {
  static const String _telegramWebAppVar = 'Telegram.WebApp';
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram
  static bool get isTelegramWebApp {
    try {
      return js.context.hasProperty('Telegram') && 
             js.context['Telegram'].hasProperty('WebApp');
    } catch (e) {
      return false;
    }
  }

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Map<String, dynamic>? getUserData() {
    if (!isTelegramWebApp) return null;
    
    try {
      final webApp = js.context['Telegram']['WebApp'];
      final initData = webApp['initData'];
      final user = webApp['initDataUnsafe']['user'];
      
      if (user != null) {
        return {
          'id': user['id'],
          'first_name': user['first_name'],
          'last_name': user['last_name'],
          'username': user['username'],
          'language_code': user['language_code'],
        };
      }
      return null;
    } catch (e) {
      print('Error getting user data: $e');
      return null;
    }
  }

  // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static String? getUserId() {
    final userData = getUserData();
    return userData?['id']?.toString();
  }

  // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ Telegram Web App API
  static Future<dynamic> callTelegramMethod(String method, [Map<String, dynamic>? params]) async {
    if (!isTelegramWebApp) return null;
    
    try {
      final webApp = js.context['Telegram']['WebApp'];
      if (params != null) {
        return webApp.callMethod(method, [js.JsObject.jsify(params)]);
      } else {
        return webApp.callMethod(method);
      }
    } catch (e) {
      print('Error calling Telegram method $method: $e');
      return null;
    }
  }

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
  static Future<List<Map<String, dynamic>>?> getContacts() async {
    try {
      final contacts = await callTelegramMethod('getContacts');
      if (contacts != null && contacts is List) {
        return contacts.map((contact) => {
          'id': contact['user_id'],
          'first_name': contact['first_name'],
          'last_name': contact['last_name'],
          'username': contact['username'],
          'phone_number': contact['phone_number'],
        }).toList();
      }
      return null;
    } catch (e) {
      print('Error getting contacts: $e');
      return null;
    }
  }

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
  static Future<List<Map<String, dynamic>>?> getChats() async {
    try {
      final chats = await callTelegramMethod('getChats');
      if (chats != null && chats is List) {
        return chats.map((chat) => {
          'id': chat['id'],
          'title': chat['title'],
          'username': chat['username'],
          'type': chat['type'],
        }).toList();
      }
      return null;
    } catch (e) {
      print('Error getting chats: $e');
      return null;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  static Future<bool> sendMessage(String chatId, String text, {String? parseMode}) async {
    try {
      final params = {
        'chat_id': chatId,
        'text': text,
      };
      
      if (parseMode != null) {
        params['parse_mode'] = parseMode;
      }
      
      final result = await callTelegramMethod('sendMessage', params);
      return result != null;
    } catch (e) {
      print('Error sending message: $e');
      return false;
    }
  }

  // –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
  static Future<bool> copyToClipboard(String text) async {
    try {
      final result = await callTelegramMethod('copyToClipboard', {'text': text});
      return result == true;
    } catch (e) {
      print('Error copying to clipboard: $e');
      return false;
    }
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º popup —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ Telegram Web App API)
  static Future<Map<String, dynamic>?> showMainButtonPopup({
    required String title,
    required String message,
    required List<Map<String, dynamic>> buttons,
  }) async {
    try {
      final webApp = js.context['Telegram']['WebApp'];
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ Telegram Web App API
      final result = await webApp.callMethod('showPopup', [{
        'title': title,
        'message': message,
        'buttons': buttons,
      }]);
      
      return result;
    } catch (e) {
      print('Error showing popup: $e');
      return null;
    }
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ shareMessage
  static Future<bool> shareMessage(String messageId, {Function(bool)? callback}) async {
    try {
      final webApp = js.context['Telegram']['WebApp'];
      
      if (callback != null) {
        // –° callback
        await webApp.callMethod('shareMessage', [messageId, (bool success) {
          callback(success);
        }]);
      } else {
        // –ë–µ–∑ callback
        await webApp.callMethod('shareMessage', [messageId]);
      }
      
      return true;
    } catch (e) {
      print('Error sharing message: $e');
      return false;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  static Future<String?> createPreparedMessage({
    required String title,
    required String description,
    required String messageText,
    String? parseMode,
  }) async {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      final response = await html.HttpRequest.request(
        'https://fsr.agency/api/create-prepared-message',
        method: 'POST',
        sendData: jsonEncode({
          'title': title,
          'description': description,
          'message_text': messageText,
          'parse_mode': parseMode ?? 'HTML',
          'user_id': getUserId(),
        }),
        requestHeaders: {
          'Content-Type': 'application/json',
        },
      );

      if (response.status == 200) {
        final data = jsonDecode(response.responseText ?? '{}');
        return data['message_id'];
      }
      
      return null;
    } catch (e) {
      print('Error creating prepared message: $e');
      return null;
    }
  }

  // –ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π —á–µ—Ä–µ–∑ Telegram Web App API
  static Future<bool> inviteFriendsWithShare() async {
    try {
      final userId = getUserId();
      if (userId == null) {
        showAlert('–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!');
        return false;
      }

      // –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
      final referralLink = "https://t.me/FSRUBOT?start=ref$userId";
      // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
      final inviteText = '''
üî• –ü—Ä–∏–≤–µ—Ç! –ù–∞—à–µ–ª –∫—Ä—É—Ç—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤ - Fresh Style Russia!

üéØ –ß—Ç–æ —Ç—É—Ç –µ—Å—Ç—å:
‚Ä¢ AI-–ø–æ–∏—Å–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ —Ñ–æ—Ç–æ
‚Ä¢ –ö–∞—Ç–∞–ª–æ–≥ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –ø–æ –≥–æ—Ä–æ–¥–∞–º  
‚Ä¢ –†–æ–∑—ã–≥—Ä—ã—à –Ω–∞ 170,000‚ÇΩ
‚Ä¢ –ë—å—é—Ç–∏-—É—Å–ª—É–≥–∏ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã

üéÅ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –ø–æ –º–æ–µ–π —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å—ã:
$referralLink

üíé –í–º–µ—Å—Ç–µ –≤—ã–∏–≥—Ä–∞–µ–º –ø—Ä–∏–∑—ã!
#FSR #FreshStyleRussia #Giveaway
      ''';

      // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      try {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º Telegram share —á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫—É (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∑–¥–µ)
        final url = 'https://t.me/share/url?url=' +
            Uri.encodeComponent(referralLink) +
            '&text=' +
            Uri.encodeComponent(inviteText);
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ/–≤–∫–ª–∞–¥–∫–µ
        html.window.open(url, '_blank');
        
        // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º —É–≤–∏–¥–∏—Ç –¥–∏–∞–ª–æ–≥
        return true;
        
      } catch (e) {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º popup —Å –æ–ø—Ü–∏—è–º–∏
        final result = await showMainButtonPopup(
          title: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏',
          message: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:',
          buttons: [
            {
              'id': 'copy_link',
              'type': 'default',
              'text': 'üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É'
            },
            {
              'id': 'show_link',
              'type': 'default',
              'text': 'üîó –ü–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É'
            },
            {
              'id': 'share_text',
              'type': 'default',
              'text': 'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–∫—Å—Ç–æ–º'
            },
            {
              'id': 'cancel',
              'type': 'cancel',
              'text': '‚ùå –û—Ç–º–µ–Ω–∞'
            }
          ],
        );

        if (result != null) {
          switch (result['button_id']) {
            case 'copy_link':
              return await copyToClipboard(referralLink);
            case 'show_link':
              showAlert('–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n\n$referralLink\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º!');
              return true;
            case 'share_text':
              return await copyToClipboard(inviteText);
            default:
              return false;
          }
        }
        return false;
      }
    } catch (e) {
      print('Error inviting friends with share: $e');
      showAlert('–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!');
      return false;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –≤ Telegram
  static Future<bool> _shareTextToTelegram(String text) async {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram Web App API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      final webApp = js.context['Telegram']['WebApp'];
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º popup —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
      final result = await webApp.callMethod('showPopup', [{
        'title': '–¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏',
        'message': '–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º:',
        'buttons': [
          {
            'id': 'copy_text',
            'type': 'default',
            'text': 'üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç'
          },
          {
            'id': 'cancel',
            'type': 'cancel',
            'text': '‚ùå –û—Ç–º–µ–Ω–∞'
          }
        ]
      }]);

      if (result != null && result['button_id'] == 'copy_text') {
        return await copyToClipboard(text);
      }
      
      return false;
    } catch (e) {
      print('Error sharing text to Telegram: $e');
      return false;
    }
  }

  // Fallback –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–ø—Ü–∏–π –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
  static Future<bool> _showFallbackShareOptions(String? userId) async {
    try {
      final referralLink = "https://t.me/FSRUBOT?start=ref${userId ?? 'user'}";
      
      // –ü—Ä–æ—Å—Ç–æ–π fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –≤ alert
      showAlert('–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π:\n\n$referralLink\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º!');
      return true;
    } catch (e) {
      print('Error showing fallback share options: $e');
      return false;
    }
  }

  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –Ω–∞ –∑–∞–ø–∏—Å—å (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π)
  static Future<bool> requestWriteAccess() async {
    try {
      final webApp = js.context['Telegram']['WebApp'];
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
      final result = await webApp.callMethod('requestWriteAccess');
      return result == true;
    } catch (e) {
      print('Error requesting write access: $e');
      return false;
    }
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º popup —Å –∫–Ω–æ–ø–∫–∞–º–∏ (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  static Future<Map<String, dynamic>?> showPopup({
    required String title,
    required String message,
    required List<Map<String, dynamic>> buttons,
  }) async {
    return showMainButtonPopup(
      title: title,
      message: message,
      buttons: buttons,
    );
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ HTML5 File API
  static Future<PhotoUploadModel?> uploadPhoto({
    required String category,
    String? description,
  }) async {
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ –≤ Telegram
      final userId = getUserId() ?? 'web_user_${DateTime.now().millisecondsSinceEpoch}';

      // –í—ã–∑—ã–≤–∞–µ–º HTML5 File API –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
      final result = await _selectFile();
      
      if (result == null) {
        return null; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ
      if (!_isValidMediaType(result['mime_type'])) {
        throw Exception('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª');
      }

      // –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
      final photoUpload = PhotoUploadModel(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        userId: userId,
        category: category,
        fileId: result['file_id'],
        fileName: result['file_name'],
        fileSize: result['file_size'],
        mimeType: result['mime_type'],
        uploadDate: DateTime.now(),
        description: description,
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
      await _saveToDatabase(photoUpload);

      return photoUpload;
    } catch (e) {
      print('Error uploading photo: $e');
      rethrow;
    }
  }

  // –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ HTML5 File API
  static Future<Map<String, dynamic>?> _selectFile() async {
    try {
      final completer = Completer<Map<String, dynamic>?>();
      
      // –°–æ–∑–¥–∞–µ–º input —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
      final input = html.FileUploadInputElement()
        ..accept = 'image/*,video/*'
        ..multiple = false;
      
      input.onChange.listen((event) {
        final files = input.files;
        if (files != null && files.isNotEmpty) {
          final file = files.first;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10MB)
          if (file.size > 10 * 1024 * 1024) {
            completer.completeError('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB');
            return;
          }

          // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ base64
          final reader = html.FileReader();
          reader.onLoad.listen((e) {
            final result = reader.result as String;
            final base64Data = result.split(',')[1]; // –£–±–∏—Ä–∞–µ–º data:image/...;base64,
            
            completer.complete({
              'file_id': DateTime.now().millisecondsSinceEpoch.toString(),
              'file_name': file.name,
              'file_size': file.size,
              'mime_type': file.type,
              'base64_data': base64Data,
            });
          });
          
          reader.readAsDataUrl(file);
        } else {
          completer.complete(null);
        }
      });
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–ª–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
      input.click();
      
      return await completer.future;
    } catch (e) {
      print('Error selecting file: $e');
      return null;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ
  static bool _isValidMediaType(String mimeType) {
    return mimeType.startsWith('image/') || mimeType.startsWith('video/');
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API
  static Future<void> _saveToDatabase(PhotoUploadModel photoUpload) async {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä
      final response = await html.HttpRequest.request(
        'https://fsr.agency/api/upload-photo',
        method: 'POST',
        sendData: jsonEncode(photoUpload.toJson()),
        requestHeaders: {
          'Content-Type': 'application/json',
        },
      );

      if (response.status != 200) {
        throw Exception('Failed to save photo to database');
      }
    } catch (e) {
      print('Error saving to database: $e');
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å fallback –ª–æ–≥–∏–∫—É
      // –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
    }
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  static void showAlert(String message) {
    if (isTelegramWebApp) {
      try {
        final webApp = js.context['Telegram']['WebApp'];
        webApp.callMethod('showAlert', [message]);
      } catch (e) {
        print('Error showing alert: $e');
        // Fallback –∫ –æ–±—ã—á–Ω–æ–º—É alert
        html.window.alert(message);
      }
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π alert –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
      html.window.alert(message);
    }
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  static Future<bool> showConfirm(String message) async {
    if (isTelegramWebApp) {
      try {
        final webApp = js.context['Telegram']['WebApp'];
        final result = webApp.callMethod('showConfirm', [message]);
        return result == true;
      } catch (e) {
        print('Error showing confirm: $e');
        // Fallback –∫ –æ–±—ã—á–Ω–æ–º—É confirm
        return html.window.confirm(message);
      }
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π confirm –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
      return html.window.confirm(message);
    }
  }
} 