import 'package:flutter/material.dart';
import 'role_selection_screen.dart';
import 'invite_friends_screen.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:html' as html;
import 'package:url_launcher/url_launcher.dart';
import '../services/telegram_webapp_service.dart';


class GiveawayScreen extends StatefulWidget {
  const GiveawayScreen({super.key});

  @override
  State<GiveawayScreen> createState() => _GiveawayScreenState();
}

class _GiveawayScreenState extends State<GiveawayScreen> {
  late Timer _timer;
  Duration _timeLeft = Duration.zero;

  bool _task1Done = false;
  bool _task2Done = false;

  String? _username;
  int _tickets = 0;

  final DateTime giveawayDate = DateTime(2025, 7, 10, 20, 0, 0); // 10 –∏—é–ª—è 2025, 20:00

  bool get _isTask1Done => _tickets >= 1; // –ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª (–µ—Å—Ç—å 1 –±–∏–ª–µ—Ç)
  bool get _isTask2Done => _tickets > 1; // –ï—Å—Ç—å —Ö–æ—Ç—è –±—ã 1 –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π –¥—Ä—É–≥ (2+ –±–∏–ª–µ—Ç–∞)

  @override
  void initState() {
    super.initState();
    _updateTimeLeft();
    _timer = Timer.periodic(const Duration(seconds: 1), (_) {
      _updateTimeLeft();
    });
    _fetchUserTickets();
  }

  void _updateTimeLeft() {
    final now = DateTime.now();
    setState(() {
      _timeLeft = giveawayDate.difference(now);
      if (_timeLeft.isNegative) {
        _timeLeft = Duration.zero;
      }
    });
  }

  Future<void> _fetchUserTickets() async {
    try {
      final userId = TelegramWebAppService.getUserId();
      if (userId == null) return;
      final response = await html.HttpRequest.request(
        'https://fsr.agency/api/user/$userId/tickets',
        method: 'GET',
        requestHeaders: {
          'Content-Type': 'application/json',
        },
      );
      if (response.status == 200) {
        final data = jsonDecode(response.responseText ?? '{}');
        setState(() {
          _tickets = data['tickets'] ?? 0;
          _username = data['username'] ?? '';
        });
      }
    } catch (e) {
      print('Error fetching tickets: $e');
    }
  }

  @override
  void dispose() {
    _timer.cancel();
    super.dispose();
  }

  String _formatDuration(Duration d) {
    String twoDigits(int n) => n.toString().padLeft(2, '0');
    return "${d.inHours.remainder(24)}:${twoDigits(d.inMinutes.remainder(60))}:${twoDigits(d.inSeconds.remainder(60))}";
  }

  Future<void> _logTaskCompletion(String userId, String taskName, int taskNumber) async {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      final response = await html.HttpRequest.request(
        'https://fsr.agency/api/log-task-completion',
        method: 'POST',
        sendData: jsonEncode({
          'user_id': userId,
          'task_name': taskName,
          'task_number': taskNumber,
        }),
        requestHeaders: {
          'Content-Type': 'application/json',
        },
      );

      if (response.status != 200) {
        print('Error logging task completion: ${response.status}');
      }
    } catch (e) {
      print('Error logging task completion: $e');
    }
  }

  Future<void> _logFolderSubscription(String userId) async {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–∞–ø–∫—É
      final response = await html.HttpRequest.request(
        'https://fsr.agency/api/log-folder-subscription',
        method: 'POST',
        sendData: jsonEncode({
          'user_id': userId,
        }),
        requestHeaders: {
          'Content-Type': 'application/json',
        },
      );

      if (response.status != 200) {
        print('Error logging folder subscription: ${response.status}');
      }
    } catch (e) {
      print('Error logging folder subscription: $e');
    }
  }

  void _showPrizesDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.black87,
        title: const Text(
          'üéÅ –ü–æ–¥–∞—Ä–∫–∏ –≥–∏–≤–µ–≤–µ—è',
          style: TextStyle(
            color: Colors.white,
            fontFamily: 'NauryzKeds',
            fontSize: 24,
            fontWeight: FontWeight.bold,
          ),
          textAlign: TextAlign.center,
        ),
        content: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              // –ü—Ä–∏–∑—ã
              _PrizeCard(
                title: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ó–æ–ª–æ—Ç–æ–µ –Ø–±–ª–æ–∫–æ',
                description: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ –ø–æ–∫—É–ø–∫–∏ –≤ –ó–æ–ª–æ—Ç–æ–º –Ø–±–ª–æ–∫–µ –Ω–∞ —Å—É–º–º—É 20,000 —Ä—É–±–ª–µ–π',
                value: '20,000‚ÇΩ',
                icon: Icons.shopping_bag,
                color: Colors.orange,
              ),
              const SizedBox(height: 16),
              _PrizeCard(
                title: '–ë—å—é—Ç–∏-—É—Å–ª—É–≥–∏',
                description: '–ö–æ–º–ø–ª–µ–∫—Å –±—å—é—Ç–∏-—É—Å–ª—É–≥ –Ω–∞ —Å—É–º–º—É 100,000 —Ä—É–±–ª–µ–π (–º–∞–Ω–∏–∫—é—Ä, –ø–µ–¥–∏–∫—é—Ä, –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ, —Å—Ç—Ä–∏–∂–∫–∞, –º–∞–∫–∏—è–∂)',
                value: '100,000‚ÇΩ',
                icon: Icons.face,
                color: Colors.pink,
              ),
              const SizedBox(height: 16),
              _PrizeCard(
                title: 'Telegram Premium (3 –º–µ—Å)',
                description: '3 Telegram Premium –Ω–∞ 3 –º–µ—Å—è—Ü–∞',
                value: '3,500‚ÇΩ',
                icon: Icons.telegram,
                color: Colors.blue,
              ),
              const SizedBox(height: 20),
              // –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–∑–æ–≤ –ø–æ —Ü–µ–Ω—Ç—Ä—É —Å–Ω–∏–∑—É
              Container(
                margin: const EdgeInsets.only(bottom: 10),
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: const Color(0xFFFF6EC7).withOpacity(0.2),
                  border: Border.all(color: const Color(0xFFFF6EC7)),
                ),
                child: const Text(
                  'üèÜ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–∑–æ–≤: 123,500‚ÇΩ',
                  style: TextStyle(
                    color: Color(0xFFFF6EC7),
                    fontFamily: 'NauryzKeds',
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
              // –£—Å–ª–æ–≤–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤
              Container(
                margin: const EdgeInsets.only(top: 0),
                padding: const EdgeInsets.all(14),
                decoration: BoxDecoration(
                  color: Colors.white.withOpacity(0.08),
                  border: Border.all(color: Colors.white24),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        const Icon(Icons.confirmation_num, color: Color(0xFFFF6EC7), size: 20),
                        const SizedBox(width: 8),
                        const Text(
                          '–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç—ã:',
                          style: TextStyle(
                            color: Colors.white,
                            fontFamily: 'NauryzKeds',
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 10),
                    Row(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text('‚Ä¢ ', style: TextStyle(color: Colors.white, fontSize: 16)),
                        Expanded(
                          child: Text(
                            '1 –±–∏–ª–µ—Ç ‚Äî –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ Telegram-–ø–∞–ø–∫—É (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω)',
                            style: const TextStyle(color: Colors.white, fontFamily: 'OpenSans', fontSize: 15),
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 4),
                    Row(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text('‚Ä¢ ', style: TextStyle(color: Colors.white, fontSize: 16)),
                        Expanded(
                          child: Text(
                            '+1 –±–∏–ª–µ—Ç ‚Äî –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞—Ä—Ç—É–µ—Ç –±–æ—Ç–∞ –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ',
                            style: const TextStyle(color: Colors.white, fontFamily: 'OpenSans', fontSize: 15),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text(
              '–ó–∞–∫—Ä—ã—Ç—å',
              style: TextStyle(
                color: Color(0xFFFF6EC7),
                fontFamily: 'NauryzKeds',
                fontSize: 16,
              ),
            ),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final allTasksDone = _tickets >= 1;
    final task1Done = _isTask1Done;
    final task2Done = _isTask2Done;

    return Scaffold(
      backgroundColor: Colors.black,
      body: Stack(
        children: [
          // –§–æ–Ω: –æ–±–∞ –±–∞–Ω–Ω–µ—Ä–∞ –¥—Ä—É–≥ –Ω–∞–¥ –¥—Ä—É–≥–æ–º
          Positioned.fill(
            child: Stack(
              children: [
                // –§–æ–Ω–æ–≤—ã–π –±–∞–Ω–Ω–µ—Ä –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
                Positioned.fill(
                  child: Image.asset(
                    'assets/giveaway_back_banner.png',
                    width: double.infinity,
                    height: double.infinity,
                    fit: BoxFit.cover,
                  ),
                ),
                // –ú—ç–π–Ω –±–∞–Ω–Ω–µ—Ä —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ 13% –∏ –ø–æ–¥–Ω—è—Ç –≤–≤–µ—Ä—Ö –Ω–∞ 5% —ç–∫—Ä–∞–Ω–∞
                Positioned.fill(
                  child: LayoutBuilder(
                    builder: (context, constraints) {
                      final height = constraints.maxHeight;
                      return Transform.translate(
                        offset: Offset(0, -height * 0.05), // –ü–æ–¥–Ω–∏–º–∞–µ–º –≤–≤–µ—Ä—Ö –Ω–∞ 5% (–±—ã–ª–æ 10%)
                        child: Transform.scale(
                          scale: 1.13,
                          alignment: Alignment.center,
                          child: Image.asset(
                            'assets/giveaway_banner.png',
                            fit: BoxFit.contain,
                            alignment: Alignment.center,
                          ),
                        ),
                      );
                    },
                  ),
                ),
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ –¥–æ 25%
                Container(
                  color: Colors.black.withOpacity(0.25), // –≤–µ—Ä–Ω—É–ª–∏ –∫ 25%
                ),
              ],
            ),
          ),
          // –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ–≤–µ—Ä—Ö —Ñ–æ–Ω–∞
          SafeArea(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                // –£–±–∏—Ä–∞–µ–º –º–∏–Ω–∏-–±–µ–π–¥–∂ —Å username –∏ –±–∏–ª–µ—Ç–∞–º–∏
                SizedBox(height: MediaQuery.of(context).size.height * 0.05 + 50), // –ë—ã–ª–æ 0.05, —Ç–µ–ø–µ—Ä—å +50px –≤–Ω–∏–∑
                // –ë–æ–∫—Å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ GIVEAWAY ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–æ–ª—å—à–æ–π
                Container(
                  alignment: Alignment.center,
                  child: FittedBox(
                    fit: BoxFit.scaleDown,
                    child: Text(
                      'GIVEAWAY',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 120,
                        fontWeight: FontWeight.bold,
                        fontFamily: 'NauryzKeds',
                        letterSpacing: 2,
                        height: 1,
                      ),
                    ),
                  ),
                ),
                const SizedBox(height: 8), // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É GIVEAWAY –∏ —Ç–∞–π–º–µ—Ä–æ–º
                // –ë–æ–∫—Å –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–æ–ª—å—à–æ–π
                Container(
                  alignment: Alignment.center,
                  child: FittedBox(
                    fit: BoxFit.scaleDown,
                    child: Text(
                      _formatDuration(_timeLeft),
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 220,
                        fontWeight: FontWeight.w700,
                        letterSpacing: -2,
                        fontFamily: 'NauryzKeds',
                        height: 0.9,
                      ),
                    ),
                  ),
                ),
                const SizedBox(height: 8), // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–ª–æ–∫–∞
                const Spacer(), // –í—Å—ë —á—Ç–æ –Ω–∏–∂–µ —Ç–∞–π–º–µ—Ä–∞ ‚Äî —É—Ö–æ–¥–∏—Ç –≤–Ω–∏–∑
                // –û–ø—É—Å–∫–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–Ω–∏–∑
                Column(
                  children: [
                                          // –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–∞—Ä–∫–∏" —Å –∏–∫–æ–Ω–∫–æ–π –±–∏–ª–µ—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–∏–ª–µ—Ç–æ–≤
                      Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 3),
                        child: GestureDetector(
                          onTap: () {
                            _showPrizesDialog();
                          },
                          child: Container(
                            width: double.infinity,
                            padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 20),
                            decoration: BoxDecoration(
                              color: const Color(0xFFFF6EC7).withOpacity(0.2),
                              border: Border.all(color: const Color(0xFFFF6EC7), width: 2),
                            ),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                const Icon(Icons.card_giftcard, color: Colors.white, size: 24),
                                const SizedBox(width: 12),
                                const Text(
                                  '–ü–æ–¥–∞—Ä–∫–∏',
                                  style: TextStyle(
                                    color: Colors.white,
                                    fontSize: 20,
                                    fontWeight: FontWeight.bold,
                                    fontFamily: 'NauryzKeds',
                                  ),
                                ),
                                const SizedBox(width: 18),
                                // –ò–∫–æ–Ω–∫–∞ –±–∏–ª–µ—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤
                                const Icon(Icons.confirmation_num, color: Color(0xFFFF6EC7), size: 22),
                                const SizedBox(width: 4),
                                Text(
                                  '$_tickets',
                                  style: const TextStyle(
                                    color: Color(0xFFFF6EC7),
                                    fontFamily: 'NauryzKeds',
                                    fontSize: 18,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      ),
                    // –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –∏ –∫–Ω–æ–ø–∫–∞
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 0, vertical: 0),
                      child: Column(
                        children: [
                          _TaskTile(
                            title: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Telegram-–ø–∞–ø–∫—É',
                            subtitle: '10 –∫–∞–Ω–∞–ª–æ–≤ –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º\n+1000 XP',
                            icon: Icons.folder_special,
                            onTap: () async {
                              const url = 'https://t.me/addlist/f3YaeLmoNsdkYjVl';
                              if (await canLaunchUrl(Uri.parse(url))) {
                                await launchUrl(Uri.parse(url), mode: LaunchMode.externalApplication);
                              }
                              setState(() {
                                _task1Done = true;
                              });
                              // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
                              try {
                                final userId = TelegramWebAppService.getUserId();
                                if (userId != null) {
                                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ API
                                  final response = await html.HttpRequest.request(
                                    'https://fsr.agency/api/check-subscription',
                                    method: 'POST',
                                    sendData: jsonEncode({
                                      'user_id': userId,
                                      'username': _username,
                                    }),
                                    requestHeaders: {
                                      'Content-Type': 'application/json',
                                    },
                                  );
                                  final data = jsonDecode(response.responseText ?? '{}');
                                  if (data['subscribed'] == true) {
                                    await _logFolderSubscription(userId);
                                    await _logTaskCompletion(userId, '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Telegram-–ø–∞–ø–∫—É', 1);
                                    await _fetchUserTickets(); // –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –±–∏–ª–µ—Ç–æ–≤
                                  } else {
                                    TelegramWebAppService.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!');
                                  }
                                }
                              } catch (e) {
                                print('Error checking subscription: $e');
                              }
                            },
                            done: task1Done,
                            taskNumber: 1,
                            completedTasks: (task1Done ? 1 : 0) + (task2Done ? 1 : 0),
                          ),
                          _TaskTile(
                            title: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π',
                            subtitle: '–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞: +100 XP',
                            icon: Icons.person_add_alt_1,
                            onTap: () async {
                              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                              setState(() {
                                _task2Done = false;
                              });
                              
                              // –û—Ç–∫—Ä—ã–≤–∞–µ–º Telegram share popup
                              final success = await TelegramWebAppService.inviteFriendsWithShare();
                              
                              if (success) {
                                setState(() {
                                  _task2Done = true;
                                });
                                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                                TelegramWebAppService.showAlert('–û—Ç–ª–∏—á–Ω–æ!');
                                
                                // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
                                try {
                                  final userId = TelegramWebAppService.getUserId();
                                  if (userId != null) {
                                    await _logTaskCompletion(userId, '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', 2);
                                  }
                                } catch (e) {
                                  print('Error logging task completion: $e');
                                }
                              } else {
                                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                                TelegramWebAppService.showAlert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                              }
                            },
                            done: task2Done,
                            taskNumber: 2,
                            completedTasks: (task1Done ? 1 : 0) + (task2Done ? 1 : 0),
                          ),
                        ],
                      ),
                    ),
                    // –ö–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" –ø—Ä—è–º–æ –ø–æ–¥ –∑–∞–¥–∞–Ω–∏—è–º–∏
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 4), // –£–º–µ–Ω—å—à–∏–ª–∏ —Å 8 –Ω–∞ 4 (–≤ 2 —Ä–∞–∑–∞)
                      child: GradientButton(
                        text: allTasksDone ? '–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' : '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏—è',
                        onTap: () {
                          Navigator.of(context).pushReplacement(
                            PageRouteBuilder(
                              pageBuilder: (_, __, ___) => const RoleSelectionScreen(),
                              transitionsBuilder: (context, animation, secondaryAnimation, child) {
                                return FadeTransition(
                                  opacity: animation,
                                  child: child,
                                );
                              },
                              transitionDuration: const Duration(milliseconds: 350),
                            ),
                          );
                        },
                        enabled: allTasksDone, // –ê–∫—Ç–∏–≤–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 1 –±–∏–ª–µ—Ç
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

// –ò–∑–º–µ–Ω–∏—Ç–µ _TaskTile, —á—Ç–æ–±—ã –æ–Ω –ø–æ–∫–∞–∑—ã–≤–∞–ª —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏:
class _TaskTile extends StatelessWidget {
  final String title;
  final String subtitle;
  final IconData icon;
  final VoidCallback onTap;
  final bool done;
  final int taskNumber;
  final int completedTasks;

  const _TaskTile({
    required this.title,
    required this.subtitle,
    required this.icon,
    required this.onTap,
    required this.done,
    required this.taskNumber,
    required this.completedTasks,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 3), // –£–º–µ–Ω—å—à–∏–ª–∏ —Å 8 –Ω–∞ 3 (–≤ 3 —Ä–∞–∑–∞)
      decoration: BoxDecoration(
        color: Colors.grey[900]!.withOpacity(0.7),
        // –£–±—Ä–∞–ª–∏ borderRadius
      ),
      child: Material(
        color: Colors.transparent,
        // –£–±—Ä–∞–ª–∏ borderRadius
        child: InkWell(
          // –£–±—Ä–∞–ª–∏ borderRadius
          splashColor: Colors.white.withOpacity(0.08),
          highlightColor: Colors.white.withOpacity(0.04),
          onTap: onTap,
          child: ListTile(
            leading: CircleAvatar(
              backgroundColor: const Color(0xFFFF6EC7),
              child: Icon(icon, color: Colors.white),
            ),
            title: Text(
              title,
              style: const TextStyle(
                color: Colors.white,
                fontWeight: FontWeight.w600,
                fontSize: 18,
              ),
            ),
            subtitle: Text(
              subtitle,
              style: const TextStyle(
                color: Colors.white70,
                fontWeight: FontWeight.w400,
                fontSize: 15,
              ),
            ),
            trailing: done
                ? Container(
                    padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                    decoration: BoxDecoration(
                      color: Colors.green.withOpacity(0.2),
                      border: Border.all(color: Colors.green),
                    ),
                    child: Text(
                      '$completedTasks/2',
                      style: const TextStyle(
                        color: Colors.green,
                        fontFamily: 'NauryzKeds',
                        fontSize: 14,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  )
                : Container(
                    padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.1),
                      border: Border.all(color: Colors.white.withOpacity(0.3)),
                    ),
                    child: Text(
                      '0/2',
                      style: TextStyle(
                        color: Colors.white.withOpacity(0.7),
                        fontFamily: 'NauryzKeds',
                        fontSize: 14,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
          ),
        ),
      ),
    );
  }
}

class GradientButton extends StatelessWidget {
  final String text;
  final VoidCallback? onTap;
  final bool enabled;
  final IconData? icon;

  const GradientButton({
    super.key,
    required this.text,
    required this.onTap,
    this.enabled = true,
    this.icon,
  });

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: enabled ? onTap : null,
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 200),
        width: double.infinity,
        height: 56,
        decoration: BoxDecoration(
          borderRadius: BorderRadius.zero, // –æ—Å—Ç—Ä—ã–µ —É–≥–ª—ã
          gradient: enabled
              ? const LinearGradient(
                  colors: [
                    Colors.white,
                    Color(0xFFFFE3F3), // –æ—á–µ–Ω—å —Å–≤–µ—Ç–ª–æ-—Ä–æ–∑–æ–≤—ã–π
                  ],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                )
              : null,
          color: enabled
              ? null
              : Colors.grey[900]!.withOpacity(0.7),
          border: enabled
              ? Border.all(
                  color: Color(0xFFFF6EC7),
                  width: 1,
                )
              : null,
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              text,
              style: TextStyle(
                color: enabled
                    ? Color(0xFFFF6EC7)
                    : Colors.white.withOpacity(0.6),
                fontSize: 20,
                fontWeight: FontWeight.w600,
                fontFamily: 'SFProDisplay',
              ),
            ),
            if (icon != null) ...[
              const SizedBox(width: 12),
              Icon(
                icon,
                color: enabled
                    ? Color(0xFFFF6EC7)
                    : Colors.white.withOpacity(0.6),
              ),
            ],
          ],
        ),
      ),
    );
  }
}

// _PrizeCard: value –ø–æ —Ü–µ–Ω—Ç—Ä—É —Å–Ω–∏–∑—É, –∏–∫–æ–Ω–∫–∞ —Å–ª–µ–≤–∞
class _PrizeCard extends StatelessWidget {
  final String title;
  final String description;
  final String value;
  final IconData icon;
  final Color color;

  const _PrizeCard({
    required this.title,
    required this.description,
    required this.value,
    required this.icon,
    required this.color,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.08),
        border: Border.all(color: color.withOpacity(0.5)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: color.withOpacity(0.2),
                  shape: BoxShape.circle,
                ),
                child: Icon(icon, color: color, size: 24),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      title,
                      style: const TextStyle(
                        color: Colors.white,
                        fontFamily: 'OpenSans', // OpenSans for title
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      description,
                      style: const TextStyle(
                        color: Colors.white70,
                        fontFamily: 'OpenSans', // OpenSans for description
                        fontSize: 14,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Center(
            child: Container(
              padding: const EdgeInsets.symmetric(horizontal: 18, vertical: 6),
              decoration: BoxDecoration(
                color: color.withOpacity(0.18),
                border: Border.all(color: color),
              ),
              child: Text(
                value,
                style: TextStyle(
                  color: color,
                  fontFamily: 'NauryzKeds', // —Ü–∏—Ñ—Ä—ã –æ—Å—Ç–∞–≤–ª—è–µ–º NauryzKeds
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}