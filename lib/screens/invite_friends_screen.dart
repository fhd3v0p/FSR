import 'dart:async';
import 'dart:convert';
import 'dart:html' as html;
import 'dart:js' as js;
import 'package:flutter/material.dart';
import '../services/telegram_webapp_service.dart';

class InviteFriendsScreen extends StatefulWidget {
  final String? referralCode;
  
  const InviteFriendsScreen({super.key, this.referralCode});

  @override
  State<InviteFriendsScreen> createState() => _InviteFriendsScreenState();
}

class _InviteFriendsScreenState extends State<InviteFriendsScreen> {
  List<Map<String, dynamic>> _selectedContacts = [];
  bool _isLoading = false;
  String? _referralCode;
  String? _referralLink;

  @override
  void initState() {
    super.initState();
    _referralCode = widget.referralCode ?? TelegramWebAppService.getUserId();
    _generateReferralLink();
  }

  void _generateReferralLink() {
    if (_referralCode != null) {
      _referralLink = "https://t.me/FSRUBOT?start=ref$_referralCode";
    }
  }

  Future<void> _selectContacts() async {
    setState(() {
      _isLoading = true;
    });

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram
      if (TelegramWebAppService.isTelegramWebApp) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram Web App API –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        final contacts = await _selectContactsTelegram();
        if (contacts != null) {
          setState(() {
            _selectedContacts = contacts;
          });
        }
      } else {
        // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        _showBrowserInstructions();
      }
    } catch (e) {
      _showError('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: $e');
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<List<Map<String, dynamic>>?> _selectContactsTelegram() async {
    try {
      final webApp = js.context['Telegram']['WebApp'];
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram Web App API –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
      final result = await _callTelegramMethod('showPopup', {
        'title': '–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–∑–µ–π',
        'message': '–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–∑–µ–π –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ FSR',
        'buttons': [
          {
            'id': 'select_contacts',
            'type': 'select_contacts',
            'text': '–í—ã–±—Ä–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã'
          },
          {
            'id': 'cancel',
            'type': 'cancel',
            'text': '–û—Ç–º–µ–Ω–∞'
          }
        ]
      });

      if (result != null && result['button_id'] == 'select_contacts') {
        // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        final contacts = await _callTelegramMethod('getContacts');
        if (contacts != null && contacts is List) {
          return contacts.map((contact) => {
            'id': contact['user_id'],
            'name': contact['first_name'] + (contact['last_name'] != null ? ' ${contact['last_name']}' : ''),
            'username': contact['username'],
            'phone': contact['phone_number'],
          }).toList();
        }
      }
      
      return null;
    } catch (e) {
      print('Error selecting contacts: $e');
      return null;
    }
  }

  Future<dynamic> _callTelegramMethod(String method, [Map<String, dynamic>? params]) async {
    try {
      final webApp = js.context['Telegram']['WebApp'];
      if (params != null) {
        return webApp.callMethod(method, [js.JsObject.jsify(params)]);
      } else {
        return webApp.callMethod(method);
      }
    } catch (e) {
      print('Error calling Telegram method $method: $e');
      return null;
    }
  }

  void _showBrowserInstructions() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.black87,
        title: const Text(
          '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π',
          style: TextStyle(color: Colors.white, fontFamily: 'NauryzKeds'),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              '–î–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π:',
              style: TextStyle(color: Colors.white, fontFamily: 'NauryzKeds'),
            ),
            const SizedBox(height: 12),
            const Text(
              '1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ\n'
              '2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º –≤ Telegram\n'
              '3. –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –ø–æ–ª—É—á–∏—Ç–µ +100 XP',
              style: TextStyle(color: Colors.white70, fontFamily: 'NauryzKeds'),
            ),
            const SizedBox(height: 16),
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.grey[900],
                border: Border.all(color: Colors.white24),
              ),
              child: SelectableText(
                _referralLink ?? '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏',
                style: const TextStyle(
                  color: Colors.white,
                  fontFamily: 'monospace',
                  fontSize: 12,
                ),
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text(
              '–ó–∞–∫—Ä—ã—Ç—å',
              style: TextStyle(color: Color(0xFFFF6EC7)),
            ),
          ),
        ],
      ),
    );
  }

  Future<void> _sendInvites() async {
    if (_selectedContacts.isEmpty) {
      _showError('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –¥—Ä—É–≥–∞');
      return;
    }

    setState(() {
      _isLoading = true;
    });

    try {
      int successCount = 0;
      
      for (final contact in _selectedContacts) {
        try {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API
          final success = await _sendInviteToContact(contact);
          if (success) {
            successCount++;
          }
        } catch (e) {
          print('Error sending invite to ${contact['name']}: $e');
        }
      }

      if (successCount > 0) {
        _showSuccess('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã $successCount –¥—Ä—É–∑—å—è–º! üéâ');
        setState(() {
          _selectedContacts.clear();
        });
      } else {
        _showError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
      }
    } catch (e) {
      _showError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: $e');
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<bool> _sendInviteToContact(Map<String, dynamic> contact) async {
    try {
      final inviteText = _generateInviteText();
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram Web App API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      final result = await _callTelegramMethod('sendMessage', {
        'chat_id': contact['id'],
        'text': inviteText,
        'parse_mode': 'HTML'
      });

      return result != null;
    } catch (e) {
      print('Error sending invite: $e');
      return false;
    }
  }

  String _generateInviteText() {
    return '''
üî• <b>–ü—Ä–∏–≤–µ—Ç! –ù–∞—à–µ–ª –∫—Ä—É—Ç—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤ - Fresh Style Russia!</b>

üéØ <b>–ß—Ç–æ —Ç—É—Ç –µ—Å—Ç—å:</b>
‚Ä¢ AI-–ø–æ–∏—Å–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ —Ñ–æ—Ç–æ
‚Ä¢ –ö–∞—Ç–∞–ª–æ–≥ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –ø–æ –≥–æ—Ä–æ–¥–∞–º  
‚Ä¢ –†–æ–∑—ã–≥—Ä—ã—à –Ω–∞ 170,000‚ÇΩ
‚Ä¢ –ë—å—é—Ç–∏-—É—Å–ª—É–≥–∏ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã

üéÅ <b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –ø–æ –º–æ–µ–π —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å—ã:</b>
<a href="$_referralLink">üöÄ –û—Ç–∫—Ä—ã—Ç—å FSR</a>

üíé <b>–í–º–µ—Å—Ç–µ –≤—ã–∏–≥—Ä–∞–µ–º –ø—Ä–∏–∑—ã!</b>

#FSR #FreshStyleRussia #Giveaway
    ''';
  }

  void _showError(String message) {
    TelegramWebAppService.showAlert(message);
  }

  void _showSuccess(String message) {
    TelegramWebAppService.showAlert(message);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      body: Stack(
        children: [
          Positioned.fill(
            child: Image.asset(
              'assets/giveaway_banner.png',
              fit: BoxFit.cover,
            ),
          ),
          Positioned.fill(
            child: Container(
              color: Colors.black.withOpacity(0.18),
            ),
          ),
          // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
          Positioned(
            top: 36,
            left: 12,
            child: IconButton(
              icon: const Icon(Icons.arrow_back_ios_new_rounded, color: Colors.white, size: 28),
              onPressed: () => Navigator.of(context).maybePop(),
              splashRadius: 24,
            ),
          ),
          SafeArea(
            child: Padding(
              padding: const EdgeInsets.all(24),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const SizedBox(height: 40),
                  const Text(
                    '–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π',
                    style: TextStyle(
                      color: Colors.white,
                      fontFamily: 'NauryzKeds',
                      fontSize: 32,
                      fontWeight: FontWeight.bold,
                      letterSpacing: 1.2,
                    ),
                  ),
                  const SizedBox(height: 8),
                  const Text(
                    '–ò –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞',
                    style: TextStyle(
                      color: Colors.white70,
                      fontFamily: 'NauryzKeds',
                      fontSize: 18,
                    ),
                  ),
                  const SizedBox(height: 32),
                  
                  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ–Ω—É—Å–∞—Ö
                  Container(
                    padding: const EdgeInsets.all(20),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.08),
                      border: Border.all(color: Colors.white, width: 1.5),
                    ),
                    child: Column(
                      children: [
                        const Row(
                          children: [
                            Icon(Icons.star, color: Color(0xFFFF6EC7), size: 24),
                            SizedBox(width: 12),
                            Text(
                              '–ë–æ–Ω—É—Å—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:',
                              style: TextStyle(
                                color: Colors.white,
                                fontFamily: 'NauryzKeds',
                                fontSize: 20,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 16),
                        const Row(
                          children: [
                            Icon(Icons.check_circle, color: Colors.green, size: 20),
                            SizedBox(width: 12),
                            Text(
                              '+100 XP —Ç–µ–±–µ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞',
                              style: TextStyle(
                                color: Colors.white,
                                fontFamily: 'NauryzKeds',
                                fontSize: 16,
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 8),
                        const Row(
                          children: [
                            Icon(Icons.check_circle, color: Colors.green, size: 20),
                            SizedBox(width: 12),
                            Text(
                              '+100 XP –¥—Ä—É–≥—É –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é',
                              style: TextStyle(
                                color: Colors.white,
                                fontFamily: 'NauryzKeds',
                                fontSize: 16,
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 8),
                        const Row(
                          children: [
                            Icon(Icons.check_circle, color: Colors.green, size: 20),
                            SizedBox(width: 12),
                            Text(
                              '–®–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑—ã –Ω–∞ 170,000‚ÇΩ',
                              style: TextStyle(
                                color: Colors.white,
                                fontFamily: 'NauryzKeds',
                                fontSize: 16,
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                  
                  const SizedBox(height: 24),
                  
                  // –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
                  if (_selectedContacts.isNotEmpty) ...[
                    Text(
                      '–í—ã–±—Ä–∞–Ω–æ –¥—Ä—É–∑–µ–π: ${_selectedContacts.length}',
                      style: const TextStyle(
                        color: Colors.white,
                        fontFamily: 'NauryzKeds',
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 12),
                    Expanded(
                      child: ListView.builder(
                        itemCount: _selectedContacts.length,
                        itemBuilder: (context, index) {
                          final contact = _selectedContacts[index];
                          return Container(
                            margin: const EdgeInsets.only(bottom: 8),
                            padding: const EdgeInsets.all(12),
                            decoration: BoxDecoration(
                              color: Colors.white.withOpacity(0.08),
                              border: Border.all(color: Colors.white24),
                            ),
                            child: Row(
                              children: [
                                CircleAvatar(
                                  backgroundColor: const Color(0xFFFF6EC7),
                                  child: Text(
                                    contact['name'][0].toUpperCase(),
                                    style: const TextStyle(
                                      color: Colors.white,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                ),
                                const SizedBox(width: 12),
                                Expanded(
                                  child: Column(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                      Text(
                                        contact['name'],
                                        style: const TextStyle(
                                          color: Colors.white,
                                          fontFamily: 'NauryzKeds',
                                          fontSize: 16,
                                          fontWeight: FontWeight.bold,
                                        ),
                                      ),
                                      if (contact['username'] != null)
                                        Text(
                                          '@${contact['username']}',
                                          style: const TextStyle(
                                            color: Colors.white70,
                                            fontFamily: 'NauryzKeds',
                                            fontSize: 14,
                                          ),
                                        ),
                                    ],
                                  ),
                                ),
                                IconButton(
                                  icon: const Icon(Icons.remove_circle, color: Colors.red),
                                  onPressed: () {
                                    setState(() {
                                      _selectedContacts.removeAt(index);
                                    });
                                  },
                                ),
                              ],
                            ),
                          );
                        },
                      ),
                    ),
                  ],
                  
                  const SizedBox(height: 24),
                  
                  // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                  Row(
                    children: [
                      Expanded(
                        child: ElevatedButton.icon(
                          onPressed: _isLoading ? null : _selectContacts,
                          icon: _isLoading 
                              ? const SizedBox(
                                  width: 20,
                                  height: 20,
                                  child: CircularProgressIndicator(
                                    strokeWidth: 2,
                                    valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                                  ),
                                )
                              : const Icon(Icons.people, color: Colors.white),
                          label: Text(
                            _isLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–∑–µ–π',
                            style: const TextStyle(
                              fontFamily: 'NauryzKeds',
                              fontWeight: FontWeight.bold,
                              fontSize: 18,
                              color: Colors.white,
                            ),
                          ),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.white.withOpacity(0.08),
                            foregroundColor: Colors.white,
                            shape: const RoundedRectangleBorder(
                              borderRadius: BorderRadius.zero,
                              side: BorderSide(color: Colors.white, width: 1.5),
                            ),
                            padding: const EdgeInsets.symmetric(vertical: 16),
                            elevation: 0,
                          ),
                        ),
                      ),
                      if (_selectedContacts.isNotEmpty) ...[
                        const SizedBox(width: 12),
                        Expanded(
                          child: ElevatedButton.icon(
                            onPressed: _isLoading ? null : _sendInvites,
                            icon: const Icon(Icons.send, color: Colors.white),
                            label: const Text(
                              '–û—Ç–ø—Ä–∞–≤–∏—Ç—å',
                              style: TextStyle(
                                fontFamily: 'NauryzKeds',
                                fontWeight: FontWeight.bold,
                                fontSize: 18,
                                color: Colors.white,
                              ),
                            ),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: const Color(0xFFFF6EC7),
                              foregroundColor: Colors.white,
                              shape: const RoundedRectangleBorder(
                                borderRadius: BorderRadius.zero,
                              ),
                              padding: const EdgeInsets.symmetric(vertical: 16),
                              elevation: 0,
                            ),
                          ),
                        ),
                      ],
                    ],
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
} 