import 'dart:async';
import 'dart:convert';
import 'dart:html' as html;
import 'dart:js' as js;
import 'package:flutter/material.dart';
import '../services/telegram_webapp_service.dart';

class InviteFriendsScreen extends StatefulWidget {
  final String? referralCode;
  
  const InviteFriendsScreen({super.key, this.referralCode});

  @override
  State<InviteFriendsScreen> createState() => _InviteFriendsScreenState();
}

class _InviteFriendsScreenState extends State<InviteFriendsScreen> {
  bool _isLoading = false;
  String? _referralCode;
  String? _referralLink;
  int _invitesSent = 0;

  @override
  void initState() {
    super.initState();
    _referralCode = widget.referralCode ?? TelegramWebAppService.getUserId();
    _generateReferralLink();
  }

  void _generateReferralLink() {
    if (_referralCode != null) {
      _referralLink = "https://t.me/FSRUBOT?start=ref$_referralCode";
    }
  }

  Future<void> _shareWithFriends() async {
    setState(() {
      _isLoading = true;
    });

    try {
      if (TelegramWebAppService.isTelegramWebApp) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram Web App API –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–æ–≤
        final success = await _openTelegramShareDialog();
        if (success) {
          _showSuccess('–î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–æ–≤ –æ—Ç–∫—Ä—ã—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–∑–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.');
        }
      } else {
        // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
        _showBrowserInstructions();
      }
    } catch (e) {
      _showError('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞: $e');
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<bool> _openTelegramShareDialog() async {
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
      final inviteText = _generateInviteText();
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram Web App API –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–æ–≤
      final result = await TelegramWebAppService.showPopup(
        title: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏',
        message: '–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–∑–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ FSR',
        buttons: [
          {
            'id': 'share_contacts',
            'type': 'share_contacts',
            'text': '–í—ã–±—Ä–∞—Ç—å –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤'
          },
          {
            'id': 'share_chats',
            'type': 'share_chats', 
            'text': '–í—ã–±—Ä–∞—Ç—å –∏–∑ —á–∞—Ç–æ–≤'
          },
          {
            'id': 'share_link',
            'type': 'share_link',
            'text': '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π'
          },
          {
            'id': 'cancel',
            'type': 'cancel',
            'text': '–û—Ç–º–µ–Ω–∞'
          }
        ],
      );

      if (result != null) {
        switch (result['button_id']) {
          case 'share_contacts':
            return await _shareWithContacts();
          case 'share_chats':
            return await _shareWithChats();
          case 'share_link':
            return await _shareLink();
          default:
            return false;
        }
      }
      
      return false;
    } catch (e) {
      print('Error opening share dialog: $e');
      return false;
    }
  }

  Future<bool> _shareWithContacts() async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
      final contacts = await TelegramWebAppService.getContacts();
      if (contacts != null && contacts.isNotEmpty) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        final selectedContacts = await _showContactSelectionDialog(contacts);
        if (selectedContacts != null && selectedContacts.isNotEmpty) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
          return await _sendInvitesToContacts(selectedContacts);
        }
      } else {
        _showError('–£ –≤–∞—Å –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
      }
      return false;
    } catch (e) {
      print('Error sharing with contacts: $e');
      return false;
    }
  }

  Future<bool> _shareWithChats() async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
      final chats = await TelegramWebAppService.getChats();
      if (chats != null && chats.isNotEmpty) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–æ–≤
        final selectedChats = await _showChatSelectionDialog(chats);
        if (selectedChats != null && selectedChats.isNotEmpty) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
          return await _sendInvitesToChats(selectedChats);
        }
      } else {
        _showError('–£ –≤–∞—Å –Ω–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
      }
      return false;
    } catch (e) {
      print('Error sharing with chats: $e');
      return false;
    }
  }

  Future<bool> _shareLink() async {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram Web App API –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
      final result = await TelegramWebAppService.copyToClipboard(_referralLink ?? '');
      
      if (result) {
        _showSuccess('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –µ—é –≤—Ä—É—á–Ω—É—é.');
        return true;
      }
      return false;
    } catch (e) {
      print('Error sharing link: $e');
      return false;
    }
  }

  Future<List<Map<String, dynamic>>?> _showContactSelectionDialog(List<Map<String, dynamic>> contacts) async {
    try {
      final result = await TelegramWebAppService.showPopup(
        title: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã',
        message: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è',
        buttons: contacts.take(10).map((contact) => {
          'id': 'contact_${contact['id']}',
          'type': 'select',
          'text': '${contact['first_name']} ${contact['last_name'] ?? ''}'
        }).toList()..add({
          'id': 'confirm',
          'type': 'confirm',
          'text': '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–º'
        })..add({
          'id': 'cancel',
          'type': 'cancel',
          'text': '–û—Ç–º–µ–Ω–∞'
        }),
      );

      if (result != null && result['button_id'] == 'confirm') {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        return contacts.where((contact) => 
          result['selected_ids']?.contains('contact_${contact['id']}') == true
        ).map((contact) => {
          'id': contact['id'],
          'name': '${contact['first_name']} ${contact['last_name'] ?? ''}',
          'username': contact['username'],
          'type': 'contact'
        }).toList();
      }
      
      return null;
    } catch (e) {
      print('Error showing contact selection: $e');
      return null;
    }
  }

  Future<List<Map<String, dynamic>>?> _showChatSelectionDialog(List<Map<String, dynamic>> chats) async {
    try {
      final result = await TelegramWebAppService.showPopup(
        title: '–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç—ã',
        message: '–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è',
        buttons: chats.take(10).map((chat) => {
          'id': 'chat_${chat['id']}',
          'type': 'select',
          'text': chat['title'] ?? chat['username'] ?? 'Unknown'
        }).toList()..add({
          'id': 'confirm',
          'type': 'confirm',
          'text': '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ'
        })..add({
          'id': 'cancel',
          'type': 'cancel',
          'text': '–û—Ç–º–µ–Ω–∞'
        }),
      );

      if (result != null && result['button_id'] == 'confirm') {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
        return chats.where((chat) => 
          result['selected_ids']?.contains('chat_${chat['id']}') == true
        ).map((chat) => {
          'id': chat['id'],
          'name': chat['title'] ?? chat['username'] ?? 'Unknown',
          'type': 'chat'
        }).toList();
      }
      
      return null;
    } catch (e) {
      print('Error showing chat selection: $e');
      return null;
    }
  }

  Future<bool> _sendInvitesToContacts(List<Map<String, dynamic>> contacts) async {
    try {
      int successCount = 0;
      final inviteText = _generateInviteText();
      
      for (final contact in contacts) {
        try {
          final success = await TelegramWebAppService.sendMessage(
            contact['id'].toString(),
            inviteText,
            parseMode: 'HTML'
          );
          
          if (success) {
            successCount++;
          }
        } catch (e) {
          print('Error sending invite to contact ${contact['name']}: $e');
        }
      }

      if (successCount > 0) {
        setState(() {
          _invitesSent += successCount;
        });
        _showSuccess('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã $successCount –∫–æ–Ω—Ç–∞–∫—Ç–∞–º! üéâ');
        return true;
      }
      
      return false;
    } catch (e) {
      print('Error sending invites to contacts: $e');
      return false;
    }
  }

  Future<bool> _sendInvitesToChats(List<Map<String, dynamic>> chats) async {
    try {
      int successCount = 0;
      final inviteText = _generateInviteText();
      
      for (final chat in chats) {
        try {
          final success = await TelegramWebAppService.sendMessage(
            chat['id'].toString(),
            inviteText,
            parseMode: 'HTML'
          );
          
          if (success) {
            successCount++;
          }
        } catch (e) {
          print('Error sending invite to chat ${chat['name']}: $e');
        }
      }

      if (successCount > 0) {
        setState(() {
          _invitesSent += successCount;
        });
        _showSuccess('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ $successCount —á–∞—Ç–æ–≤! üéâ');
        return true;
      }
      
      return false;
    } catch (e) {
      print('Error sending invites to chats: $e');
      return false;
    }
  }

  Future<dynamic> _callTelegramMethod(String method, [Map<String, dynamic>? params]) async {
    return TelegramWebAppService.callTelegramMethod(method, params);
  }

  void _showBrowserInstructions() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.black87,
        title: const Text(
          '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π',
          style: TextStyle(color: Colors.white, fontFamily: 'NauryzKeds'),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              '–î–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π:',
              style: TextStyle(color: Colors.white, fontFamily: 'NauryzKeds'),
            ),
            const SizedBox(height: 12),
            const Text(
              '1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ\n'
              '2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º –≤ Telegram\n'
              '3. –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –ø–æ–ª—É—á–∏—Ç–µ +100 XP',
              style: TextStyle(color: Colors.white70, fontFamily: 'NauryzKeds'),
            ),
            const SizedBox(height: 16),
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.grey[900],
                border: Border.all(color: Colors.white24),
              ),
              child: SelectableText(
                _referralLink ?? '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏',
                style: const TextStyle(
                  color: Colors.white,
                  fontFamily: 'monospace',
                  fontSize: 12,
                ),
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text(
              '–ó–∞–∫—Ä—ã—Ç—å',
              style: TextStyle(color: Color(0xFFFF6EC7)),
            ),
          ),
        ],
      ),
    );
  }

  String _generateInviteText() {
    return '''
üî• <b>–ü—Ä–∏–≤–µ—Ç! –ù–∞—à–µ–ª –∫—Ä—É—Ç—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤ - Fresh Style Russia!</b>

üéØ <b>–ß—Ç–æ —Ç—É—Ç –µ—Å—Ç—å:</b>
‚Ä¢ AI-–ø–æ–∏—Å–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ —Ñ–æ—Ç–æ
‚Ä¢ –ö–∞—Ç–∞–ª–æ–≥ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –ø–æ –≥–æ—Ä–æ–¥–∞–º  
‚Ä¢ –†–æ–∑—ã–≥—Ä—ã—à –Ω–∞ 170,000‚ÇΩ
‚Ä¢ –ë—å—é—Ç–∏-—É—Å–ª—É–≥–∏ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã

üéÅ <b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –ø–æ –º–æ–µ–π —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å—ã:</b>
<a href="$_referralLink">üöÄ –û—Ç–∫—Ä—ã—Ç—å FSR</a>

üíé <b>–í–º–µ—Å—Ç–µ –≤—ã–∏–≥—Ä–∞–µ–º –ø—Ä–∏–∑—ã!</b>

#FSR #FreshStyleRussia #Giveaway
    ''';
  }

  void _showError(String message) {
    TelegramWebAppService.showAlert(message);
  }

  void _showSuccess(String message) {
    TelegramWebAppService.showAlert(message);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      body: Stack(
        children: [
          Positioned.fill(
            child: Image.asset(
              'assets/giveaway_banner.png',
              fit: BoxFit.cover,
            ),
          ),
          Positioned.fill(
            child: Container(
              color: Colors.black.withOpacity(0.18),
            ),
          ),
          // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
          Positioned(
            top: 36,
            left: 12,
            child: IconButton(
              icon: const Icon(Icons.arrow_back_ios_new_rounded, color: Colors.white, size: 28),
              onPressed: () => Navigator.of(context).maybePop(),
              splashRadius: 24,
            ),
          ),
          SafeArea(
            child: Padding(
              padding: const EdgeInsets.all(24),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const SizedBox(height: 40),
                  const Text(
                    '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏',
                    style: TextStyle(
                      color: Colors.white,
                      fontFamily: 'NauryzKeds',
                      fontSize: 32,
                      fontWeight: FontWeight.bold,
                      letterSpacing: 1.2,
                    ),
                  ),
                  const SizedBox(height: 8),
                  const Text(
                    '–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å—ã',
                    style: TextStyle(
                      color: Colors.white70,
                      fontFamily: 'NauryzKeds',
                      fontSize: 18,
                    ),
                  ),
                  const SizedBox(height: 32),
                  
                  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ–Ω—É—Å–∞—Ö
                  Container(
                    padding: const EdgeInsets.all(20),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.08),
                      border: Border.all(color: Colors.white, width: 1.5),
                    ),
                    child: Column(
                      children: [
                        const Row(
                          children: [
                            Icon(Icons.star, color: Color(0xFFFF6EC7), size: 24),
                            SizedBox(width: 12),
                            Text(
                              '–ë–æ–Ω—É—Å—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:',
                              style: TextStyle(
                                color: Colors.white,
                                fontFamily: 'NauryzKeds',
                                fontSize: 20,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 16),
                        const Row(
                          children: [
                            Icon(Icons.check_circle, color: Colors.green, size: 20),
                            SizedBox(width: 12),
                            Text(
                              '+100 XP —Ç–µ–±–µ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞',
                              style: TextStyle(
                                color: Colors.white,
                                fontFamily: 'NauryzKeds',
                                fontSize: 16,
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 8),
                        const Row(
                          children: [
                            Icon(Icons.check_circle, color: Colors.green, size: 20),
                            SizedBox(width: 12),
                            Text(
                              '+100 XP –¥—Ä—É–≥—É –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é',
                              style: TextStyle(
                                color: Colors.white,
                                fontFamily: 'NauryzKeds',
                                fontSize: 16,
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 8),
                        const Row(
                          children: [
                            Icon(Icons.check_circle, color: Colors.green, size: 20),
                            SizedBox(width: 12),
                            Text(
                              '–®–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑—ã –Ω–∞ 170,000‚ÇΩ',
                              style: TextStyle(
                                color: Colors.white,
                                fontFamily: 'NauryzKeds',
                                fontSize: 16,
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                  
                  const SizedBox(height: 24),
                  
                  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
                  if (_invitesSent > 0) ...[
                    Container(
                      padding: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        color: Colors.green.withOpacity(0.2),
                        border: Border.all(color: Colors.green.withOpacity(0.5)),
                      ),
                      child: Row(
                        children: [
                          const Icon(Icons.check_circle, color: Colors.green, size: 24),
                          const SizedBox(width: 12),
                          Text(
                            '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: $_invitesSent',
                            style: const TextStyle(
                              color: Colors.green,
                              fontFamily: 'NauryzKeds',
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ],
                      ),
                    ),
                    const SizedBox(height: 24),
                  ],
                  
                  // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
                  SizedBox(
                    width: double.infinity,
                    child: ElevatedButton.icon(
                      onPressed: _isLoading ? null : _shareWithFriends,
                      icon: _isLoading 
                          ? const SizedBox(
                              width: 20,
                              height: 20,
                              child: CircularProgressIndicator(
                                strokeWidth: 2,
                                valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                              ),
                            )
                          : const Icon(Icons.share, color: Colors.white, size: 28),
                      label: Text(
                        _isLoading ? '–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞...' : '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏',
                        style: const TextStyle(
                          fontFamily: 'NauryzKeds',
                          fontWeight: FontWeight.bold,
                          fontSize: 20,
                          color: Colors.white,
                          letterSpacing: 1.1,
                        ),
                      ),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: const Color(0xFFFF6EC7),
                        foregroundColor: Colors.white,
                        shape: const RoundedRectangleBorder(
                          borderRadius: BorderRadius.zero,
                        ),
                        padding: const EdgeInsets.symmetric(vertical: 20),
                        elevation: 0,
                      ),
                    ),
                  ),
                  
                  const SizedBox(height: 16),
                  
                  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                  Container(
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.05),
                      border: Border.all(color: Colors.white24),
                    ),
                    child: const Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:',
                          style: TextStyle(
                            color: Colors.white,
                            fontFamily: 'NauryzKeds',
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        SizedBox(height: 8),
                        Text(
                          '1. –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏"\n'
                          '2. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–ª–∏ —á–∞—Ç–æ–≤\n'
                          '3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ\n'
                          '4. –ü–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞!',
                          style: TextStyle(
                            color: Colors.white70,
                            fontFamily: 'NauryzKeds',
                            fontSize: 14,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
} 